{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"E:\\\\The Hive\\\\PROGRAMACION VARIOS\\\\Curso React Native udemy\\\\Udemy-React-Native\\\\Parte 1\\\\rn-starter\\\\src\\\\screens\\\\squareScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useReducer } from \"react\";\nimport ColorCounter from \"../components/colorCounter\";\nvar COLOR_INCREMENT = 15;\n\nvar reducer = function reducer(state, action) {\n  switch (action.colorToChange) {\n    case \"red\":\n      return state.red + action.amount > 255 || state.red + action.amount < 0 ? state : _objectSpread(_objectSpread({}, state), {}, {\n        blue: state.blue + action.amount\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        red: state.red + action.amount\n      });\n\n    case \"green\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        green: state.green + action.amount\n      });\n\n    case \"blue\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blue: state.blue + action.amount\n      });\n\n    default:\n  }\n};\n\nvar SquareScreen = function SquareScreen() {\n  var _useReducer = useReducer(reducer, {\n    red: 0,\n    blue: 0,\n    green: 0\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var red = state.red,\n      green = state.green,\n      blue = state.blue;\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        colorToChange: \"red\",\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        colorToChange: \"red\",\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Rojo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        colorToChange: \"green\",\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        colorToChange: \"green\",\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Verde\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        colorToChange: \"blue\",\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        colorToChange: \"blue\",\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Azul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      marginTop: 15,\n      marginLeft: 120,\n      height: 150,\n      width: 150,\n      backgroundColor: \"rgb(\" + red + \" , \" + green + \" , \" + blue + \" )\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: estilos.centrado,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Composicion RGB : (\", red, \", \", green, \", \", blue, \")\"));\n};\n\nvar estilos = StyleSheet.create({\n  centrado: {\n    marginTop: 15,\n    marginLeft: 100\n  }\n});\nexport default SquareScreen;","map":{"version":3,"sources":["E:/The Hive/PROGRAMACION VARIOS/Curso React Native udemy/Udemy-React-Native/Parte 1/rn-starter/src/screens/squareScreen.js"],"names":["React","useReducer","ColorCounter","COLOR_INCREMENT","reducer","state","action","colorToChange","red","amount","blue","green","SquareScreen","dispatch","marginTop","marginLeft","height","width","backgroundColor","estilos","centrado","StyleSheet","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Text, StyleSheet, View, Button, FlatList } from \"react-native\";\r\nimport { useReducer } from \"react\";\r\nimport ColorCounter from \"../components/colorCounter\";\r\n\r\nconst COLOR_INCREMENT = 15; //saltos en el color\r\nconst reducer = (state, action) => {\r\n  //state==={red: numero, blue: numero, green:numero}\r\n  //action==={colorToChange:'red'||'green'||'blue'}\r\n  switch (action.colorToChange) {\r\n    case \"red\":\r\n      return state.red + action.amount > 255 || state.red + action.amount < 0\r\n        ? state\r\n        : { ...state, blue: state.blue + action.amount };\r\n\r\n      return { ...state, red: state.red + action.amount };\r\n    case \"green\":\r\n      return { ...state, green: state.green + action.amount };\r\n    case \"blue\":\r\n      return { ...state, blue: state.blue + action.amount };\r\n    default:\r\n  }\r\n};\r\n\r\nconst SquareScreen = () => {\r\n  const [state, dispatch] = useReducer(reducer, { red: 0, blue: 0, green: 0 });\r\n  const { red, green, blue } = state;\r\n\r\n  return (\r\n    <View>\r\n      <ColorCounter\r\n        onIncrease={() =>\r\n          dispatch({ colorToChange: \"red\", amount: COLOR_INCREMENT })\r\n        }\r\n        onDecrease={() =>\r\n          dispatch({ colorToChange: \"red\", amount: -1 * COLOR_INCREMENT })\r\n        }\r\n        color=\"Rojo\"\r\n      />\r\n      <ColorCounter\r\n        onIncrease={() =>\r\n          dispatch({ colorToChange: \"green\", amount: COLOR_INCREMENT })\r\n        }\r\n        onDecrease={() =>\r\n          dispatch({ colorToChange: \"green\", amount: -1 * COLOR_INCREMENT })\r\n        }\r\n        color=\"Verde\"\r\n      />\r\n      <ColorCounter\r\n        onIncrease={() =>\r\n          dispatch({ colorToChange: \"blue\", amount: COLOR_INCREMENT })\r\n        }\r\n        onDecrease={() =>\r\n          dispatch({ colorToChange: \"blue\", amount: -1 * COLOR_INCREMENT })\r\n        }\r\n        color=\"Azul\"\r\n      />\r\n      <View\r\n        style={{\r\n          marginTop: 15,\r\n          marginLeft: 120,\r\n          height: 150,\r\n          width: 150,\r\n          backgroundColor: `rgb(${red} , ${green} , ${blue} )`,\r\n        }}\r\n      />\r\n      <Text style={estilos.centrado}>\r\n        Composicion RGB : ({red}, {green}, {blue})\r\n      </Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst estilos = StyleSheet.create({\r\n  centrado: {\r\n    marginTop: 15,\r\n    marginLeft: 100,\r\n  },\r\n});\r\n\r\nexport default SquareScreen;\r\n"]},"metadata":{},"sourceType":"module"}